// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */

 //Las interfaces tienen todas sus funciones definidas pero no implementadas.
 //Son parecidas a los abastract contractos, pero recordemos que estos últimos deberían
 //Ser marcados como abstracts siempre y cuando tengan al menos una función definida pero no implementada.
 //Un contrato que tiene todas sus fuciones definidas e implementadas también puede ser marcado como abstract.
 //Las interfaces tienen reglas adicionales:
 //1. Las interfaces no pueden extender otros contratos: ej -> interface IERC20 is ERC20 (ERC20 es un contrato). Esto no se puede hacer.
 //2. Todas las funciones declaradas dentro de una interfaz deben ser externals. Es decir, son funciones que se pueden llamar via transacciones
 //o en contratos externos, pero no en el contrato interno (actual).
 //3. Las interfaces no pueden declarar un constructor.
 //4. Las interfaces no pueden tener state variables. Tiene sentido, una interfaz es como un "esquema a seguir".
 //Todas las funciones de la interfaz, por default, son marcadas como "virtual" (es decir, se pueden overridear)
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
     //La función transfer es diferente de transfer from. Transfer envía fondos del msg.sender al recepient.
     //En transferFrom lo que voy a poder hacer gastos en nombre de otra address particular.
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
     //El valor del allowance, que es la cantidad de tokens que puede gastar el spender en nombre del owner
     //cambiará siempre que se ejecuten las funciones transferFrom o approve. Esta función es solo para ver
     //La cantidad que puede gastar en nombre del owner.
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
     //El msg.sender habilita a gastar a la address spender amount cantidad de tokens.
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
     //msg.sender sería el spender. Address sender sería la address que tiene permitido gastar el msg.sender, recipient sería
     //el receptor de los fondos y amount es la cantidad que envía.
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
